#!/bin/sh


export APP_NAME
export APP_HOME
export LIB_DIR
export APP_JAVA_OPTS
export APP_JAVA_ARGS
export APP_MAINCLASS
export JAVA_HOME
export JAVA_CMD
export JAVA_VERSION
export JAVA_TOOL_OPTIONS
export JAVA_OPTS
export JAVA_ARGS
export CLASSPATH
export MAINCLASS
export NO_VERSION_CHECK="false"
export VERBOSE="false"
export DEBUG="false"


dlog() {
  $DEBUG && echo "[debug] [$(date +'%Y-%m-%dT%H:%M:%S%z')]: $@" >&2
}

elog() {
  echo "[error] [$(date +'%Y-%m-%dT%H:%M:%S%z')]: $@" >&2
}

die() {
  elog "$1"
  exit "$2"
}

resolve_primary_environment_variables() {
  readonly APP_NAME="${0##*/}" || die "Error resolving APP_NAME" $?
  readonly APP_HOME="$(dirname "$(realpath "$0")")" || die "Error resolving APP_HOME" $?
  readonly LIB_DIR="$([ -n "$APP_HOME" ] && echo "$(dirname "$APP_HOME")/lib")" || die "Error resolving LIB_DIR" $?
}

resolve_arguments() {
  while [ $# -gt 0 ]; do
    case "$1" in
      -h|-help) usage ;;
      -v|-verbose) VERBOSE=true && shift ;;
      -d|-debug) DEBUG=true && shift ;;
      -no-version-check) NO_VERSION_CHECK=true && shift ;;
      -mem) echo "!! WARNING !! -mem option is ignored. Please use -Xmx and -Xms" && shift 2 ;;
      -java-home) [ -n "$2" -a "${2#-}" = "$2" ] || die "$1 requires <path> argument" &&\
                   JAVA_HOME="$2" && shift 2 ;;
      -main) [ -n "$2" -a "${2#-}" = "$2" ] || die "$1 requires <classname> argument" &&\
              APP_MAINCLASS="$2" && shift 2 ;;
      -D*|-agentlib*|-X*|-XX*) APP_JAVA_OPTS="$APP_JAVA_OPTS $1" && shift ;;
      *) break;
    esac
  done
  if [ $# -gt 0 ]; then
    APP_JAVA_ARGS="$@"
  fi
}

resolve_java() {
  JAVA_CMD="$([ -n "$JAVA_HOME" -a -x "$JAVA_HOME/bin/java" ] && echo "$JAVA_HOME/bin/java" || echo "$(which java)")" || die "Error resolving java" $?
  if [ -z "$JAVA_CMD" ]; then
    printf "%s\n%s" "No java installations was detected." "Please go to http://www.java.com/getjava/ and download"
    return 1
  fi
  JAVA_VERSION="$([ -n "$JAVA_CMD" ] && echo "$("$JAVA_CMD" -version 2>&1 | head -n 1 | cut -d'"' -f2)")" || die "Error resolving java version" $?
  if $NO_VERSION_CHECK || [ -z "$JAVA_VERSION" ] && [ "$(echo "$JAVA_VERSION" | cut -d'.' -f1)" = "1" -a "$(echo "$JAVA_VERSION" | cut -d'.' -f2)" -lt "6" ]; then
    printf "%s\n%s\n%s\n\n%s\n%s\n" "The java installation you have is not up to date."\
     "$APP_NAME requires at least version 1.6+, you have"\
     "version $JAVA_VERSION"\
     "Please go to http://www.java.com/getjava/ and download"
     "a valid Java Runtime and install before running $APP_NAME."
    return 1
  fi
}

usage() {
cat << EOM
Usage: $APP_NAME [-options] [args...]

where options include:
  -h | -help            print this message
  -v | -verbose         this runner is chattier
  -d | -debug           set log level to debug
  -no-version-check     don't run java version check, the default
  -main <classname>     define a custom main class

  # jvm options
  -D<property>=<value>  set the system property value
  -X<option>            pass -X option to jvm
  -XX<option>           pass -XX option to jvm
  -agentlib:<lib>       pass -agentlib option with lib native library agent to jvm

  # java home (currently $JAVA_HOME)
  -java-home <path>     alternate JAVA_HOME environment variable


where args are arguments passed to the main() method separated by spaces


jvm environment variables
  JAVA_HOME
                       environment variable containing the path to java installation,
                       if blank the application tries to locate available "java" command
                       (currently: "$JAVA_HOME")
  JAVA_TOOL_OPTIONS
                       environment variable containing the options passed to jvm
                       (currently: "$JAVA_TOOL_OPTIONS")
  JAVA_OPTS
                       same as JAVA_TOOL_OPTIONS, used if JAVA_TOOL_OPTIONS is blank
                       (currently: "$JAVA_OPTS")
  JAVA_ARGS
                       arguments passed to the main() method separated by spaces
                       (currently: "$JAVA_ARGS")


In case of duplicated jvm options, in resolving precedence, the order is as follows:
  1. Options passed to the script
  2. JAVA_TOOL_OPTIONS
  3. JAVA_OPTS


In case of duplicated jvm args, in resolving precedence, the order is as follows:
  1. Arguments passed to the script
  2. JAVA_ARGS


The custom main class passed by the -main option overrides the default.
"${{available-mainclasses}}"
EOM
exit 0
}

execRunner () {
  $VERBOSE || $DEBUG && dlog "Executing $@"
  local_java_cmd="$1"
  local_java_tool_options="$2"
  local_classpath="$4"
  local_java_args="$5"
  exec $local_java_cmd $local_java_tool_options -cp "$local_classpath" $local_java_args
}

main() {
  resolve_primary_environment_variables || die "Error resolving primary environment variables" $?
  resolve_arguments "$@" || die "Error resolving arguments" $?
  resolve_java || die "Error resolving java" $?

  [ -n "$APP_JAVA_OPTS" ] && JAVA_TOOL_OPTIONS="$APP_JAVA_OPTS"
  [ -z "$JAVA_TOOL_OPTIONS" -a -n "$JAVA_OPTS" ] && JAVA_TOOL_OPTIONS="$JAVA_OPTS"
  [ -n "$APP_MAINCLASS" ] && MAINCLASS="$APP_MAINCLASS" || MAINCLASS="${{mainclass}}"
  [ -n "$APP_JAVA_ARGS" ] && JAVA_ARGS="$APP_JAVA_ARGS"
  CLASSPATH="${{classpath}}" || [ -n "$CLASSPATH" ] && CLASSPATH="$LIB_DIR/*" || die "Error resolving classpath"

  execRunner "$JAVA_CMD" "$JAVA_TOOL_OPTIONS" "-cp" "$CLASSPATH" "$MAINCLASS" "$JAVA_ARGS"
}

main "$@"
